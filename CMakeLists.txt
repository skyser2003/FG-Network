CMAKE_MINIMUM_REQUIRED (VERSION 3.4)
LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeHelper/CMake")
INCLUDE(msvc_support)

## Exe setting
RUNTIME_LIBRARY_OPTION(Release /MT)
RUNTIME_LIBRARY_OPTION(Debug /MTd)

# Common directores
SET(PCH_DIR "pch")
SET(HEADER_DIR "include")
SET(SRC_DIR "src")
IF(MSVC)
	SET(BOOST_ROOT "C:/Projects/boost")
ELSEIF(CMAKE_COMPILER_IS_GNUCXX)
	SET(BOOST_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/../boost")
ENDIF()

FIND_PACKAGE(Boost 1.59.0 REQUIRED)

SET(PCH_HEADER ${PCH_DIR}/stdafx.h)
SET(PCH_SRC ${PCH_DIR}/stdafx.cpp)

# Server projects
SET(CLIENT_PROJECT_NAME "libFGClient")
SET(SHARED_PROJECT_NAME "libFGNetworkShared")
SET(SERVER_PROJECT_NAME "libFGServer")

SET(CLIENT_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libFGClient)
SET(SHARED_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libFGNetworkShared)
SET(SERVER_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libFGServer)

IF(${CMAKE_EXE_LINKER_FLAGS} MATCHES "/machine:x64")
	SET (ARCH "64")
ELSE()
	SET (ARCH "86")
ENDIF()

# Generate library projects
IF(MSVC)
	ADD_COMPILE_OPTIONS("/EHsc")
ELSEIF(CMAKE_COMPILER_IS_GNUCXX)
	ADD_COMPILE_OPTIONS("-std=c++1z")
ENDIF()

ADD_SUBDIRECTORY(${CLIENT_ROOT_DIR})
ADD_SUBDIRECTORY(${SHARED_ROOT_DIR})
ADD_SUBDIRECTORY(${SERVER_ROOT_DIR})
